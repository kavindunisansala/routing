╔═══════════════════════════════════════════════════════════════════════════════╗
║          ✅ WORMHOLE ATTACK VERIFICATION CHECKLIST                           ║
╚═══════════════════════════════════════════════════════════════════════════════╝

Run these commands after successful build:

═══════════════════════════════════════════════════════════════════════════════
1. RUN BASIC TEST
═══════════════════════════════════════════════════════════════════════════════

cd ~/Downloads/ns-allinone-3.35/ns-3.35
./waf --run "routing --use_enhanced_wormhole=true --simTime=10"

EXPECTED IN CONSOLE:
  ✅ "Created X wormhole tunnels between malicious nodes"
  ✅ "Activated X wormhole tunnels from 0s to 10s"
  ✅ Statistics table printed at end

═══════════════════════════════════════════════════════════════════════════════
2. CHECK OUTPUT FILES
═══════════════════════════════════════════════════════════════════════════════

ls -lh wormhole-attack-results.csv VanetRoutingCompare.csv

EXPECTED:
  ✅ wormhole-attack-results.csv exists (not empty)
  ✅ VanetRoutingCompare.csv exists
  ✅ Both files have recent timestamps

═══════════════════════════════════════════════════════════════════════════════
3. VERIFY WORMHOLE STATISTICS
═══════════════════════════════════════════════════════════════════════════════

cat wormhole-attack-results.csv

EXPECTED FORMAT:
  TunnelID,NodeA,NodeB,PacketsIntercepted,PacketsTunneled,...
  0,2,15,234,234,0,89,145,0.000001
  1,5,22,189,189,0,67,122,0.000001
  ...
  TOTAL,ALL,ALL,1523,1523,0,567,956,0.000001

CHECK:
  ✅ Multiple tunnel entries (based on malicious node count)
  ✅ PacketsIntercepted > 0
  ✅ PacketsTunneled > 0 (if wormhole_drop_packets=false)
  ✅ TOTAL row at bottom with aggregate stats

═══════════════════════════════════════════════════════════════════════════════
4. QUICK STATISTICS SUMMARY
═══════════════════════════════════════════════════════════════════════════════

# Count tunnels
echo "Number of wormhole tunnels:"
grep -v "TOTAL" wormhole-attack-results.csv | grep -v "TunnelID" | wc -l

# Total packets affected
echo "Total packets tunneled:"
grep "TOTAL" wormhole-attack-results.csv | cut -d',' -f5

# Routing vs Data split
echo "Routing packets affected:"
grep "TOTAL" wormhole-attack-results.csv | cut -d',' -f7
echo "Data packets affected:"
grep "TOTAL" wormhole-attack-results.csv | cut -d',' -f8

EXPECTED:
  ✅ Number of tunnels = (malicious_nodes / 2) approximately
  ✅ Total packets > 0
  ✅ Routing + Data = Total Intercepted

═══════════════════════════════════════════════════════════════════════════════
5. RUN EXTENDED TEST (Better Results)
═══════════════════════════════════════════════════════════════════════════════

./waf --run "routing --use_enhanced_wormhole=true --simTime=60 --nWifis=50"

EXPECTED:
  ✅ More packets intercepted (longer simulation)
  ✅ Higher packet counts in CSV
  ✅ Statistics more representative

═══════════════════════════════════════════════════════════════════════════════
6. TEST DIFFERENT MODES
═══════════════════════════════════════════════════════════════════════════════

# Tunneling mode (normal wormhole)
./waf --run "routing --use_enhanced_wormhole=true --wormhole_drop_packets=false --simTime=30"
grep "TOTAL" wormhole-attack-results.csv
# Expected: PacketsTunneled = PacketsIntercepted, PacketsDropped = 0

# Drop mode (blackhole behavior)
./waf --run "routing --use_enhanced_wormhole=true --wormhole_drop_packets=true --simTime=30"
grep "TOTAL" wormhole-attack-results.csv
# Expected: PacketsDropped = PacketsIntercepted, PacketsTunneled = 0

═══════════════════════════════════════════════════════════════════════════════
7. VERIFY CONSOLE STATISTICS OUTPUT
═══════════════════════════════════════════════════════════════════════════════

The simulation should print this at the end:

========== WORMHOLE ATTACK STATISTICS ==========
Total Tunnels: X

Tunnel 0 (Node X <-> Node Y):
  Packets Intercepted: XXX
  Packets Tunneled: XXX
  Packets Dropped: 0
  Routing Packets Affected: XX
  Data Packets Affected: XXX
  Avg Tunneling Delay: 0.000001 s

AGGREGATE STATISTICS:
  Total Packets Intercepted: XXXX
  Total Packets Tunneled: XXXX
  Total Routing Packets Affected: XXX
  Total Data Packets Affected: XXX
================================================

═══════════════════════════════════════════════════════════════════════════════
8. VERIFY NETANIM VISUALIZATION (Optional)
═══════════════════════════════════════════════════════════════════════════════

# Check if XML file created
ls -lh vanet-routing.xml

# Open in NetAnim (if installed)
netanim vanet-routing.xml

EXPECTED:
  ✅ Malicious nodes colored RED
  ✅ Normal nodes in different color
  ✅ Wormhole tunnel connections visible

═══════════════════════════════════════════════════════════════════════════════
9. COMPARE WITH/WITHOUT WORMHOLE
═══════════════════════════════════════════════════════════════════════════════

# Run WITHOUT wormhole
./waf --run "routing --use_enhanced_wormhole=false --simTime=30"
cp VanetRoutingCompare.csv VanetRoutingCompare_no_wormhole.csv

# Run WITH wormhole
./waf --run "routing --use_enhanced_wormhole=true --simTime=30"
cp VanetRoutingCompare.csv VanetRoutingCompare_with_wormhole.csv

# Compare metrics
echo "Without Wormhole:"
tail -5 VanetRoutingCompare_no_wormhole.csv

echo ""
echo "With Wormhole:"
tail -5 VanetRoutingCompare_with_wormhole.csv

EXPECTED DIFFERENCES:
  ✅ Different PDR (Packet Delivery Ratio)
  ✅ Different End-to-End Delay
  ✅ Different Throughput
  ✅ Wormhole attack should affect routing metrics

═══════════════════════════════════════════════════════════════════════════════

SUCCESS CRITERIA:
═════════════════

✅ wormhole-attack-results.csv created
✅ Multiple tunnels shown in CSV
✅ PacketsIntercepted > 0
✅ PacketsTunneled > 0 (tunneling mode) OR PacketsDropped > 0 (drop mode)
✅ Console prints wormhole statistics
✅ Routing metrics affected compared to no-attack scenario

═══════════════════════════════════════════════════════════════════════════════
