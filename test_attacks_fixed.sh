#!/bin/bash
# SDVN Security Attack Testing Suite - CORRECTED VERSION
# Tests Wormhole, Sybil, and Blackhole attacks with proper command-line arguments

echo "==============================================="
echo "SDVN Security Attack Testing Suite"
echo "Testing Wormhole, Sybil, and Blackhole Attacks"
echo "==============================================="
echo ""

# Create results directory with timestamp
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
RESULTS_DIR="attack_results_${TIMESTAMP}"
mkdir -p ${RESULTS_DIR}

echo "Results will be saved to: ${RESULTS_DIR}"
echo ""

# Configuration parameters
SIM_TIME=100
N_VEHICLES=18
N_RSUS=10

# Function to collect CSV files after a test
collect_csv_files() {
    local test_prefix=$1
    local test_name=$2
    local csv_count=0
    
    # List of possible CSV files generated by routing.cc
    local csv_files=(
        "packet-delivery-analysis.csv"
        "blackhole-attack-results.csv"
        "sybil-attack-results.csv"
        "sybil-detection-results.csv"
        "sybil-mitigation-results.csv"
        "replay-attack-results.csv"
        "replay-detection-results.csv"
        "replay-mitigation-results.csv"
        "trusted-certification-results.csv"
        "rssi-detection-results.csv"
        "resource-testing-results.csv"
        "incentive-scheme-results.csv"
    )
    
    for csv in "${csv_files[@]}"; do
        if [ -f "$csv" ]; then
            cp "$csv" "${RESULTS_DIR}/${test_prefix}_${csv}"
            ((csv_count++))
        fi
    done
    
    if [ $csv_count -gt 0 ]; then
        echo "✓ ${test_name} completed - collected ${csv_count} CSV file(s)"
        return 0
    else
        echo "⚠ ${test_name} ran but no CSV files generated"
        return 1
    fi
}

# ============================================
# TEST 1: BASELINE (NO ATTACKS)
# ============================================
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "TEST 1: Baseline - No Attacks"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
./waf --run "routing \
    --simTime=${SIM_TIME} \
    --N_Vehicles=${N_VEHICLES} \
    --N_RSUs=${N_RSUS} \
    --enable_packet_tracking=true" \
    > ${RESULTS_DIR}/test1_baseline_output.txt 2>&1

TEST_EXIT_CODE=$?
if [ $TEST_EXIT_CODE -eq 0 ]; then
    collect_csv_files "test1_baseline" "Baseline test"
else
    echo "✗ Baseline test failed with exit code $TEST_EXIT_CODE"
    echo "  Error details: tail -50 ${RESULTS_DIR}/test1_baseline_output.txt"
    exit 1
fi
echo ""

# ============================================
# TEST 2: WORMHOLE ATTACK (10%)
# ============================================
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "TEST 2: Wormhole Attack (10% malicious)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
./waf --run "routing \
    --simTime=${SIM_TIME} \
    --N_Vehicles=${N_VEHICLES} \
    --N_RSUs=${N_RSUS} \
    --enable_packet_tracking=true \
    --use_enhanced_wormhole=true \
    --attack_percentage=0.1 \
    --enable_wormhole_detection=true \
    --enable_wormhole_mitigation=true" \
    > ${RESULTS_DIR}/test2_wormhole_10_output.txt 2>&1

if [ $? -eq 0 ]; then
    collect_csv_files "test2_wormhole_10" "Wormhole 10% test"
else
    echo "✗ Wormhole 10% test failed"
fi
echo ""

# ============================================
# TEST 3: WORMHOLE ATTACK (20%)
# ============================================
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "TEST 3: Wormhole Attack (20% malicious)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
./waf --run "routing \
    --simTime=${SIM_TIME} \
    --N_Vehicles=${N_VEHICLES} \
    --N_RSUs=${N_RSUS} \
    --enable_packet_tracking=true \
    --use_enhanced_wormhole=true \
    --attack_percentage=0.2 \
    --enable_wormhole_detection=true \
    --enable_wormhole_mitigation=true" \
    > ${RESULTS_DIR}/test3_wormhole_20_output.txt 2>&1

if [ $? -eq 0 ]; then
    collect_csv_files "test3_wormhole_20" "Wormhole 20% test"
else
    echo "✗ Wormhole 20% test failed"
fi
echo ""

# ============================================
# TEST 4: BLACKHOLE ATTACK (10%)
# ============================================
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "TEST 4: Blackhole Attack (10% malicious)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
./waf --run "routing \
    --simTime=${SIM_TIME} \
    --N_Vehicles=${N_VEHICLES} \
    --N_RSUs=${N_RSUS} \
    --enable_packet_tracking=true \
    --enable_blackhole_attack=true \
    --blackhole_attack_percentage=0.1 \
    --enable_blackhole_mitigation=true" \
    > ${RESULTS_DIR}/test4_blackhole_10_output.txt 2>&1

if [ $? -eq 0 ]; then
    collect_csv_files "test4_blackhole_10" "Blackhole 10% test"
else
    echo "✗ Blackhole 10% test failed"
fi
echo ""

# ============================================
# TEST 5: BLACKHOLE ATTACK (20%)
# ============================================
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "TEST 5: Blackhole Attack (20% malicious)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
./waf --run "routing \
    --simTime=${SIM_TIME} \
    --N_Vehicles=${N_VEHICLES} \
    --N_RSUs=${N_RSUS} \
    --enable_packet_tracking=true \
    --enable_blackhole_attack=true \
    --blackhole_attack_percentage=0.2 \
    --enable_blackhole_mitigation=true" \
    > ${RESULTS_DIR}/test5_blackhole_20_output.txt 2>&1

if [ $? -eq 0 ]; then
    collect_csv_files "test5_blackhole_20" "Blackhole 20% test"
else
    echo "✗ Blackhole 20% test failed"
fi
echo ""

# ============================================
# TEST 6: SYBIL ATTACK (10%)
# ============================================
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "TEST 6: Sybil Attack (10% malicious)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
./waf --run "routing \
    --simTime=${SIM_TIME} \
    --N_Vehicles=${N_VEHICLES} \
    --N_RSUs=${N_RSUS} \
    --enable_packet_tracking=true \
    --enable_sybil_attack=true \
    --sybil_attack_percentage=0.1 \
    --enable_sybil_detection=true \
    --enable_sybil_mitigation=true \
    --enable_sybil_mitigation_advanced=true \
    --use_trusted_certification=true \
    --use_rssi_detection=true" \
    > ${RESULTS_DIR}/test6_sybil_10_output.txt 2>&1

if [ $? -eq 0 ]; then
    collect_csv_files "test6_sybil_10" "Sybil 10% test"
else
    echo "✗ Sybil 10% test failed"
fi
echo ""

# ============================================
# TEST 7: REPLAY ATTACK (10%)
# ============================================
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "TEST 7: Replay Attack (10% malicious)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
./waf --run "routing \
    --simTime=${SIM_TIME} \
    --N_Vehicles=${N_VEHICLES} \
    --N_RSUs=${N_RSUS} \
    --enable_packet_tracking=true \
    --enable_replay_attack=true \
    --replay_attack_percentage=0.1 \
    --enable_replay_detection=true \
    --enable_replay_mitigation=true" \
    > ${RESULTS_DIR}/test7_replay_10_output.txt 2>&1

if [ $? -eq 0 ]; then
    collect_csv_files "test7_replay_10" "Replay 10% test"
else
    echo "✗ Replay 10% test failed"
fi
echo ""

# ============================================
# TEST 8: COMBINED ATTACKS (All at 10%)
# ============================================
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "TEST 8: Combined Attacks (10% each)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
./waf --run "routing \
    --simTime=${SIM_TIME} \
    --N_Vehicles=${N_VEHICLES} \
    --N_RSUs=${N_RSUS} \
    --enable_packet_tracking=true \
    --use_enhanced_wormhole=true \
    --attack_percentage=0.1 \
    --enable_wormhole_detection=true \
    --enable_wormhole_mitigation=true \
    --enable_blackhole_attack=true \
    --blackhole_attack_percentage=0.1 \
    --enable_blackhole_mitigation=true \
    --enable_sybil_attack=true \
    --sybil_attack_percentage=0.1 \
    --enable_sybil_detection=true \
    --enable_sybil_mitigation=true" \
    > ${RESULTS_DIR}/test8_combined_10_output.txt 2>&1

if [ $? -eq 0 ]; then
    collect_csv_files "test8_combined_10" "Combined 10% test"
else
    echo "✗ Combined 10% test failed"
fi
echo ""

# ============================================
# GENERATE SUMMARY REPORT
# ============================================
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "Generating Summary Report"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

REPORT_FILE="${RESULTS_DIR}/test_summary.txt"

cat > ${REPORT_FILE} << EOF
═══════════════════════════════════════════════════════════════
  SDVN SECURITY ATTACK TEST SUMMARY
═══════════════════════════════════════════════════════════════

Test Date: $(date)
Results Directory: ${RESULTS_DIR}

Test Configuration:
  - Simulation Time: ${SIM_TIME} seconds
  - Number of Vehicles: ${N_VEHICLES}
  - Number of RSUs: ${N_RSUS}
  - Total Network Nodes: $((N_VEHICLES + N_RSUS))

Test Scenarios Completed:
─────────────────────────────────────────────────────────────
  Test 1: Baseline (No Attacks)
  Test 2: Wormhole Attack (10% malicious nodes)
  Test 3: Wormhole Attack (20% malicious nodes)
  Test 4: Blackhole Attack (10% malicious nodes)
  Test 5: Blackhole Attack (20% malicious nodes)
  Test 6: Sybil Attack (10% malicious nodes)
  Test 7: Replay Attack (10% malicious nodes)
  Test 8: Combined Attacks (10% each)

CSV Files Generated:
─────────────────────────────────────────────────────────────
EOF

# Count CSV files
CSV_COUNT=$(find ${RESULTS_DIR} -name "*.csv" -type f | wc -l)
echo "  Total CSV files: ${CSV_COUNT}" >> ${REPORT_FILE}
echo "" >> ${REPORT_FILE}

# List all CSV files
find ${RESULTS_DIR} -name "*.csv" -type f | sort | while read file; do
    echo "  - $(basename $file)" >> ${REPORT_FILE}
done

cat >> ${REPORT_FILE} << EOF

═══════════════════════════════════════════════════════════════
Next Steps:
─────────────────────────────────────────────────────────────
1. Install Python dependencies (if not already done):
   python3 setup_analysis_dependencies.py

2. Analyze results:
   python3 analyze_attack_results.py ${RESULTS_DIR}

3. Review generated analysis files:
   - summary_statistics.csv
   - attack_impact_comparison.csv
   - performance_comparison.png
   - results_latex_table.tex

═══════════════════════════════════════════════════════════════
End of Summary
═══════════════════════════════════════════════════════════════
EOF

cat ${REPORT_FILE}

echo ""
echo "╔════════════════════════════════════════════════════════════╗"
echo "║  Test Suite Complete!                                      ║"
echo "║  Results saved to: ${RESULTS_DIR}"
echo "╔════════════════════════════════════════════════════════════╗"
echo ""
echo "To analyze results:"
echo "  python3 analyze_attack_results.py ${RESULTS_DIR}"
