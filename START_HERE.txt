═══════════════════════════════════════════════════════════════════════════════
  🎯 QUICK START - BUILD THE SIMULATION [Updated: 2025-10-12 15:25]
═══════════════════════════════════════════════════════════════════════════════

STATUS: ✅ ALL ERRORS FIXED - WINDOWS FILES READY FOR LINUX

STEP 1: COPY FILES TO LINUX (REQUIRED!)
════════════════════════════════════════

Your Linux VM has OLD files with 30+ errors!
Copy these 3 files from Windows to Linux:

  FROM: d:\routing\
  TO:   ~/Downloads/ns-allinone-3.35/ns-3.35/scratch/

  FILES:
    1. routing.cc
    2. wormhole_attack.h
    3. wormhole_attack.cc

FASTEST METHOD: Use WinSCP (GUI tool for Windows↔Linux file transfer)

STEP 2: VERIFY FILES ON LINUX
══════════════════════════════

cd ~/Downloads/ns-allinone-3.35/ns-3.35/scratch

# Quick verification - all should pass:
grep "present_replay_attack_nodes" routing.cc
grep '#include "wormhole_attack.cc"' routing.cc
! grep "NS_LOG_COMPONENT_DEFINE" wormhole_attack.cc
grep "!= Ipv4Address" wormhole_attack.cc

If any fail, files not synced correctly!

STEP 3: BUILD ON LINUX
═══════════════════════

cd ~/Downloads/ns-allinone-3.35/ns-3.35
./waf clean
./waf build

EXPECTED:
  [2539/2539] Linking build/scratch/routing
  'build' finished successfully

STEP 4: TEST SIMULATION
════════════════════════

# Basic test (10 seconds):
./waf --run "routing --use_enhanced_wormhole=true --simTime=10"

# Full test (300 seconds with output):
./waf --run "routing --use_enhanced_wormhole=true --simTime=300" 2>&1 | tee wormhole_run.log

OUTPUT FILES:
  - wormhole-attack-results.csv (tunnel statistics)
  - VanetRoutingCompare.csv (routing protocol data)
  - wormhole_run.log (console output)

STEP 5: ANALYZE RESULTS
════════════════════════

# View statistics:
cat wormhole-attack-results.csv

# Generate plots (if you have the analysis script):
python3 wormhole_analysis.py wormhole-attack-results.csv --plot

═══════════════════════════════════════════════════════════════════════════════

⚠️ IF BUILD FAILS:
══════════════════

1. Check files synced: Run verification commands in Step 2
2. Look at error message:
   - "replay" errors → routing.cc not synced
   - "g_log" errors → wormhole_attack.cc not synced
   - "IsEqual" errors → wormhole_attack.cc not synced
   - "4 parameters" → wormhole_attack.h not synced

3. See detailed troubleshooting: TROUBLESHOOTING.md

═══════════════════════════════════════════════════════════════════════════════

📁 KEY CONFIGURATION (already in routing.cc):
═════════════════════════════════════════════

bool use_enhanced_wormhole = true;           // Enable wormhole attack
std::string wormhole_tunnel_bandwidth = "1000Mbps";
uint32_t wormhole_tunnel_delay_us = 1;       // 1 microsecond
bool wormhole_drop_packets = false;          // Tunnel (not drop)
bool wormhole_random_pairing = true;         // Random malicious pairs

Malicious nodes: 10% of total network nodes

═══════════════════════════════════════════════════════════════════════════════

📚 DOCUMENTATION:
═════════════════

- SYNC_NOW.txt         → Detailed file copy instructions
- BUILD_GUIDE.md       → Complete build history & steps
- TROUBLESHOOTING.md   → Error resolution log
- README.md            → Full implementation details
- QUICK_REFERENCE.md   → Wormhole configuration guide

═══════════════════════════════════════════════════════════════════════════════
