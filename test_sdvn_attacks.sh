#!/bin/bash
# ============================================================================
# SDVN-ONLY Security Attack Testing Suite
# Tests SDVN Controller Attacks: Wormhole, Sybil, and Blackhole
# ============================================================================

echo "========================================================"
echo "SDVN Controller Security Attack Testing Suite"
echo "Testing Controller-Level Attacks with Mitigation"
echo "========================================================"
echo ""

# Create results directory with timestamp
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
RESULTS_DIR="sdvn_attack_results_${TIMESTAMP}"
mkdir -p ${RESULTS_DIR}

echo "Results will be saved to: ${RESULTS_DIR}"
echo ""

# Configuration parameters
SIM_TIME=100
N_VEHICLES=18
N_RSUS=10
ARCHITECTURE=0  # 0=centralized, 1=distributed, 2=hybrid

# Function to collect CSV files after a test
collect_csv_files() {
    local test_prefix=$1
    local test_name=$2
    local csv_count=0
    
    # List of possible CSV files generated by routing.cc
    local csv_files=(
        "packet-delivery-analysis.csv"
        "blackhole-attack-results.csv"
        "sybil-attack-results.csv"
        "sybil-detection-results.csv"
        "sybil-mitigation-results.csv"
        "replay-attack-results.csv"
        "replay-detection-results.csv"
        "replay-mitigation-results.csv"
        "trusted-certification-results.csv"
        "rssi-detection-results.csv"
        "resource-testing-results.csv"
        "incentive-scheme-results.csv"
        "DlRsrpSinrStats.txt"
        "UlSinrStats.txt"
        "DlRlcStats.txt"
    )
    
    for csv in "${csv_files[@]}"; do
        if [ -f "$csv" ]; then
            cp "$csv" "${RESULTS_DIR}/${test_prefix}_${csv}"
            ((csv_count++))
        fi
    done
    
    if [ $csv_count -gt 0 ]; then
        echo "✓ ${test_name} completed - collected ${csv_count} file(s)"
        return 0
    else
        echo "⚠ ${test_name} ran but no result files generated"
        return 1
    fi
}

echo "╔════════════════════════════════════════════════════════════╗"
echo "║  NOTE: SDVN Data Plane Attacks                            ║"
echo "║  These attacks are performed by compromised data plane    ║"
echo "║  nodes (vehicles/RSUs) within the SDVN architecture       ║"
echo "║  Controllers remain trusted - nodes are malicious         ║"
echo "╚════════════════════════════════════════════════════════════╝"
echo ""

# ============================================
# TEST 1: BASELINE (NO ATTACKS)
# ============================================
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "TEST 1: SDVN Baseline - No Controller Attacks"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
./waf --run "routing \
    --simTime=${SIM_TIME} \
    --N_Vehicles=${N_VEHICLES} \
    --N_RSUs=${N_RSUS} \
    --architecture=${ARCHITECTURE} \
    --enable_packet_tracking=true" \
    > ${RESULTS_DIR}/test1_sdvn_baseline_output.txt 2>&1

TEST_EXIT_CODE=$?
if [ $TEST_EXIT_CODE -eq 0 ]; then
    collect_csv_files "test1_sdvn_baseline" "SDVN Baseline test"
else
    echo "✗ Baseline test failed with exit code $TEST_EXIT_CODE"
    echo "  Error details: tail -50 ${RESULTS_DIR}/test1_sdvn_baseline_output.txt"
    exit 1
fi
echo ""

# ============================================
# TEST 2: SDVN WORMHOLE ATTACK (10% Nodes)
# ============================================
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "TEST 2: SDVN Wormhole Attack (10% malicious data plane nodes)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Data plane nodes perform wormhole attacks in SDVN architecture
./waf --run "routing \
    --simTime=${SIM_TIME} \
    --N_Vehicles=${N_VEHICLES} \
    --N_RSUs=${N_RSUS} \
    --architecture=${ARCHITECTURE} \
    --enable_packet_tracking=true \
    --present_wormhole_attack_nodes=true \
    --use_enhanced_wormhole=true \
    --attack_percentage=0.1 \
    --enable_wormhole_detection=true \
    --enable_wormhole_mitigation=true" \
    > ${RESULTS_DIR}/test2_sdvn_wormhole_10_output.txt 2>&1

if [ $? -eq 0 ]; then
    collect_csv_files "test2_sdvn_wormhole_10" "SDVN Wormhole 10% test"
else
    echo "✗ SDVN Wormhole 10% test failed"
fi
echo ""

# ============================================
# TEST 3: SDVN WORMHOLE ATTACK (20% Nodes)
# ============================================
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "TEST 3: SDVN Wormhole Attack (20% malicious data plane nodes)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
./waf --run "routing \
    --simTime=${SIM_TIME} \
    --N_Vehicles=${N_VEHICLES} \
    --N_RSUs=${N_RSUS} \
    --architecture=${ARCHITECTURE} \
    --enable_packet_tracking=true \
    --present_wormhole_attack_nodes=true \
    --use_enhanced_wormhole=true \
    --attack_percentage=0.2 \
    --enable_wormhole_detection=true \
    --enable_wormhole_mitigation=true" \
    > ${RESULTS_DIR}/test3_sdvn_wormhole_20_output.txt 2>&1

if [ $? -eq 0 ]; then
    collect_csv_files "test3_sdvn_wormhole_20" "SDVN Wormhole 20% test"
else
    echo "✗ SDVN Wormhole 20% test failed"
fi
echo ""

# ============================================
# TEST 4: SDVN BLACKHOLE ATTACK (10% Nodes)
# ============================================
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "TEST 4: SDVN Blackhole Attack (10% malicious data plane nodes)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
./waf --run "routing \
    --simTime=${SIM_TIME} \
    --N_Vehicles=${N_VEHICLES} \
    --N_RSUs=${N_RSUS} \
    --architecture=${ARCHITECTURE} \
    --enable_packet_tracking=true \
    --present_blackhole_attack_nodes=true \
    --attack_percentage=0.1 \
    --enable_blackhole_attack=true \
    --blackhole_attack_percentage=0.1 \
    --blackhole_advertise_fake_routes=true \
    --enable_blackhole_mitigation=true" \
    > ${RESULTS_DIR}/test4_sdvn_blackhole_10_output.txt 2>&1

if [ $? -eq 0 ]; then
    collect_csv_files "test4_sdvn_blackhole_10" "SDVN Blackhole 10% test"
else
    echo "✗ SDVN Blackhole 10% test failed"
fi
echo ""

# ============================================
# TEST 5: SDVN BLACKHOLE ATTACK (20% Nodes)
# ============================================
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "TEST 5: SDVN Blackhole Attack (20% malicious data plane nodes)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
./waf --run "routing \
    --simTime=${SIM_TIME} \
    --N_Vehicles=${N_VEHICLES} \
    --N_RSUs=${N_RSUS} \
    --architecture=${ARCHITECTURE} \
    --enable_packet_tracking=true \
    --present_blackhole_attack_nodes=true \
    --attack_percentage=0.2 \
    --enable_blackhole_attack=true \
    --blackhole_attack_percentage=0.2 \
    --blackhole_advertise_fake_routes=true \
    --enable_blackhole_mitigation=true" \
    > ${RESULTS_DIR}/test5_sdvn_blackhole_20_output.txt 2>&1

if [ $? -eq 0 ]; then
    collect_csv_files "test5_sdvn_blackhole_20" "SDVN Blackhole 20% test"
else
    echo "✗ SDVN Blackhole 20% test failed"
fi
echo ""

# ============================================
# TEST 6: SDVN SYBIL ATTACK (10% Nodes)
# ============================================
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "TEST 6: SDVN Sybil Attack (10% malicious data plane nodes)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
./waf --run "routing \
    --simTime=${SIM_TIME} \
    --N_Vehicles=${N_VEHICLES} \
    --N_RSUs=${N_RSUS} \
    --architecture=${ARCHITECTURE} \
    --enable_packet_tracking=true \
    --present_sybil_attack_nodes=true \
    --attack_percentage=0.1 \
    --enable_sybil_attack=true \
    --sybil_attack_percentage=0.1 \
    --sybil_advertise_fake_routes=true \
    --sybil_clone_legitimate_nodes=true \
    --enable_sybil_detection=true \
    --enable_sybil_mitigation=true \
    --enable_sybil_mitigation_advanced=true \
    --use_trusted_certification=true \
    --use_rssi_detection=true" \
    > ${RESULTS_DIR}/test6_sdvn_sybil_10_output.txt 2>&1

if [ $? -eq 0 ]; then
    collect_csv_files "test6_sdvn_sybil_10" "SDVN Sybil 10% test"
else
    echo "✗ SDVN Sybil 10% test failed"
fi
echo ""

# ============================================
# TEST 7: SDVN COMBINED ATTACKS (All at 10%)
# ============================================
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "TEST 7: SDVN Combined Attacks (10% nodes - Wormhole + Blackhole + Sybil)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
./waf --run "routing \
    --simTime=${SIM_TIME} \
    --N_Vehicles=${N_VEHICLES} \
    --N_RSUs=${N_RSUS} \
    --architecture=${ARCHITECTURE} \
    --enable_packet_tracking=true \
    --present_wormhole_attack_nodes=true \
    --present_blackhole_attack_nodes=true \
    --present_sybil_attack_nodes=true \
    --use_enhanced_wormhole=true \
    --attack_percentage=0.1 \
    --enable_wormhole_detection=true \
    --enable_wormhole_mitigation=true \
    --enable_blackhole_attack=true \
    --blackhole_attack_percentage=0.1 \
    --enable_blackhole_mitigation=true \
    --enable_sybil_attack=true \
    --sybil_attack_percentage=0.1 \
    --enable_sybil_detection=true \
    --enable_sybil_mitigation=true" \
    > ${RESULTS_DIR}/test7_sdvn_combined_10_output.txt 2>&1

if [ $? -eq 0 ]; then
    collect_csv_files "test7_sdvn_combined_10" "SDVN Combined 10% test"
else
    echo "✗ SDVN Combined 10% test failed"
fi
echo ""

# ============================================
# GENERATE SUMMARY REPORT
# ============================================
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "Generating SDVN Attack Test Summary"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

REPORT_FILE="${RESULTS_DIR}/sdvn_test_summary.txt"

cat > ${REPORT_FILE} << EOF
═══════════════════════════════════════════════════════════════
  SDVN DATA PLANE SECURITY ATTACK TEST SUMMARY
═══════════════════════════════════════════════════════════════

Test Date: $(date)
Results Directory: ${RESULTS_DIR}

Test Configuration:
  - Architecture: SDVN (Centralized SDN with trusted controllers)
  - Attack Location: Data Plane (compromised nodes, not controllers)
  - Simulation Time: ${SIM_TIME} seconds
  - Number of Vehicles: ${N_VEHICLES}
  - Number of RSUs: ${N_RSUS}
  - Total Network Nodes: $((N_VEHICLES + N_RSUS))
  - Controller Architecture: ${ARCHITECTURE} (0=centralized, 1=distributed, 2=hybrid)

Test Scenarios Completed:
─────────────────────────────────────────────────────────────
  Test 1: SDVN Baseline (No Attacks)
  Test 2: SDVN Wormhole Attack (10% malicious data plane nodes)
  Test 3: SDVN Wormhole Attack (20% malicious data plane nodes)
  Test 4: SDVN Blackhole Attack (10% malicious data plane nodes)
  Test 5: SDVN Blackhole Attack (20% malicious data plane nodes)
  Test 6: SDVN Sybil Attack (10% malicious data plane nodes)
  Test 7: SDVN Combined Attacks (Wormhole + Blackhole + Sybil @ 10% each)

SDVN Data Plane Attack Types Tested:
─────────────────────────────────────────────────────────────
1. Wormhole Attack (Data Plane):
   - Compromised nodes create fake tunnels between each other
   - Packets are encapsulated and tunneled, bypassing normal routing
   - Controller sees false topology (shorter paths that don't exist)
   - Detection: RTT-based latency monitoring by controller
   - Mitigation: Controller recalculates routes avoiding suspicious paths

2. Blackhole Attack (Data Plane):
   - Compromised nodes drop packets silently
   - Nodes advertise themselves as having good routes
   - Controller flow tables are not manipulated, nodes just don't forward
   - Detection: Controller monitors PDR per node
   - Mitigation: Controller blacklists suspicious nodes

3. Sybil Attack (Data Plane):
   - Compromised nodes claim multiple fake identities
   - Reports false neighbor information to controller
   - Pollutes controller's network topology database
   - Detection: Identity verification (PKI), RSSI analysis by controller
   - Mitigation: Trusted certification, resource testing

Key Difference from Controller Attacks:
─────────────────────────────────────────────────────────────
- Controllers: TRUSTED (not malicious)
- Data Plane Nodes: COMPROMISED (malicious)
- Attacks happen at edge layer, not control plane
- Controller detects and mitigates attacks from data plane nodes

Result Files Generated:
─────────────────────────────────────────────────────────────
EOF

# Count all result files
FILE_COUNT=$(find ${RESULTS_DIR} -type f | wc -l)
CSV_COUNT=$(find ${RESULTS_DIR} -name "*.csv" -type f | wc -l)
echo "  Total files: ${FILE_COUNT}" >> ${REPORT_FILE}
echo "  CSV files: ${CSV_COUNT}" >> ${REPORT_FILE}
echo "" >> ${REPORT_FILE}

# List CSV files only
if [ $CSV_COUNT -gt 0 ]; then
    echo "CSV Files:" >> ${REPORT_FILE}
    find ${RESULTS_DIR} -name "*.csv" -type f | sort | while read file; do
        echo "  - $(basename $file)" >> ${REPORT_FILE}
    done
    echo "" >> ${REPORT_FILE}
fi

cat >> ${REPORT_FILE} << EOF

Performance Metrics to Analyze:
─────────────────────────────────────────────────────────────
1. Packet Delivery Ratio (PDR) - Impact of controller attacks
2. End-to-End Delay - Controller processing delays
3. Network Throughput - Overall data transmission rate
4. Controller Overhead - Extra control traffic
5. Detection Rate - How well attacks are identified
6. False Positive Rate - Legitimate controllers marked as malicious
7. Mitigation Success Rate - Recovered performance after mitigation

Attack-Specific Metrics:
─────────────────────────────────────────────────────────────
Wormhole:
  - Fake tunnels created by malicious controllers
  - Route distortion percentage
  - Flow table pollution rate

Blackhole:
  - Packets dropped by malicious controllers
  - Traffic attraction rate
  - Controller reputation scores

Sybil:
  - Fake identities injected
  - Topology database pollution
  - Identity verification success rate

═══════════════════════════════════════════════════════════════
Next Steps:
─────────────────────────────────────────────────────════════
1. Install Python dependencies (if not already done):
   python3 setup_analysis_dependencies.py

2. Analyze results:
   python3 analyze_attack_results.py ${RESULTS_DIR}

3. Review generated analysis files:
   - summary_statistics.csv
   - attack_impact_comparison.csv
   - performance_comparison.png
   - results_latex_table.tex

4. For detailed logs, check individual test output files:
   cat ${RESULTS_DIR}/test<N>_sdvn_*_output.txt

═══════════════════════════════════════════════════════════════
End of SDVN Attack Test Summary
═══════════════════════════════════════════════════════════════
EOF

cat ${REPORT_FILE}

echo ""
echo "╔════════════════════════════════════════════════════════════╗"
echo "║  SDVN Attack Test Suite Complete!                         ║"
echo "║  Results saved to: ${RESULTS_DIR}"
echo "╚════════════════════════════════════════════════════════════╝"
echo ""
echo "To analyze results:"
echo "  python3 analyze_attack_results.py ${RESULTS_DIR}"
echo ""
echo "To view summary:"
echo "  cat ${RESULTS_DIR}/sdvn_test_summary.txt"
